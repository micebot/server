stages:
  - prepare
  - quality
  - testing
  - pre-deploy
  - deploy

variables:
  HEROKU_RUNTIME: "python-3.8.3"
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"

cache:
  key: "$CI_COMMIT_SHA"
  paths:
    - .cache/pip
    - .venv
    - runtime.txt
    - requirements.txt

# Templates ----------

.python: &py
  image: python:3.8


.quality-template: &quality
  stage: quality
  <<: *py

  cache: {}

  rules:
    - when: always


.test-template: &test
  stage: testing
  <<: *py

  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'

  cache: {}

  rules:
    - when: on_success


# Prepare Jobs ----------

install deps:
  stage: prepare
  <<: *py
  script:
    - pip install poetry
    - poetry --version
    - poetry config cache-dir .cache
    - poetry config virtualenvs.in-project = true
    - poetry install


# Quality Jobs ----------

codestyle:
  <<: *quality
  script:
    - poetry run pylama server


docstyle:
  <<: *quality
  script:
    # D101: Missing docstring in public class.
    # D102: Missing docstring in public method.
    # D103: Missing docstring in public function.
    - poetry run pydocstyle --select=D101,D102,D103 server


black:
  <<: *quality
  script:
    - poetry run black -l 79 --check server


# Testing Jobs ----------

unit tests:
  <<: *test
  script:
    - poetry run coverage run -m unittest discover -s test/unit -v
    - poetry run coverage report

  dependencies:
    - codestyle
    - docstyle
    - black


# Prepare for deploy Jobs ----------

requirements:
  <<: *py
  stage: pre-deploy

  dependencies:
    - unit tests

  script:
    - echo "$HEROKU_RUNTIME" > runtime.txt
    - poetry export -f requirements.txt > requirements.txt

  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success


# Deploy Jobs

deploy to heroku:

  stage: deploy
  image: ruby:2.7

  script:
    - gem install dpl
    - dpl --provider=heroku --app=$SERVER_HEROKU_APP --api-key=$HEROKU_SECRET_KEY --skip-cleanup=true

  dependencies:
    - requirements

  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
