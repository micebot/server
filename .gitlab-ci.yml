stages:
  - prepare
  - quality
  - testing
  - deploy


variables:
  HEROKU_RUNTIME: "python-3.8.3"
  PIP_CACHE_DIR: "${CI_PROJECT_DIR}/.cache/pip"


cache:
  key: "$CI_COMMIT_SHA"
  paths:
    - .cache/pip
    - .venv
    - runtime.txt
    - requirements.txt


# Templates ----------


.python: &py
  image: python:3.8
  before_script:
    - pip install poetry
    - poetry --version
    - poetry config cache-dir .cache/poetry
    - poetry config virtualenvs.in-project true
    - poetry install


.quality-template: &quality
  stage: quality
  <<: *py

  cache:
    key: "$CI_COMMIT_SHA"
    paths:
      - .cache/pip
      - .venv
    policy: pull

  rules:
    - when: on_success


.test-template: &test
  stage: testing
  <<: *py

  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'

  cache:
    key: "$CI_COMMIT_SHA"
    paths:
      - .cache/pip
      - .venv
    policy: pull

  rules:
    - when: on_success


.deploy-template: &deploy
  stage: deploy
  image: ruby:2.7

  dependencies:
    - unit tests

  before_script:
    - gem install dpl


# Prepare Jobs ----------


setup:
  stage: prepare
  <<: *py
  script:
    - echo "$HEROKU_RUNTIME" > runtime.txt
    - poetry export -f requirements.txt > requirements.txt


# Quality Jobs ----------


codestyle:
  <<: *quality
  script:
    - poetry run pylama server


docstyle:
  <<: *quality
  script:
    # D101: Missing docstring in public class.
    # D102: Missing docstring in public method.
    # D103: Missing docstring in public function.
    - poetry run pydocstyle --select=D101,D102,D103 server


black:
  <<: *quality
  script:
    - poetry run black -l 79 --check server


# Testing Jobs ----------


unit tests:
  <<: *test
  script:
    - poetry run coverage run -m unittest discover -s test/unit -v
    - poetry run coverage report

  dependencies:
    - codestyle
    - docstyle
    - black


# Deploy Jobs


production:
  <<: *deploy
  script:
    - dpl --provider=heroku --app=$SERVER_HEROKU_APP --api-key=$HEROKU_SECRET_KEY --skip-cleanup=true

  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success


staging:
  <<: *deploy
  script:
    - dpl --provider=heroku --app=$SERVER_DEV_HEROKU_APP --api-key=$HEROKU_SECRET_KEY --skip-cleanup=true

  rules:
    - if: '$CI_COMMIT_BRANCH == "development"'
      when: on_success
