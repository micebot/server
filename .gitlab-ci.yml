stages:
  - quality
  - testing
  - pre-deploy
  - deploy

variables:
  HEROKU_RUNTIME: "python-3.8.2"

cache:
  key: "$CI_COMMIT_SHA"
  paths:
    - runtime.txt
    - requirements.txt


.install-deps-template: &install-deps
  before_script:
    - pip install poetry
    - poetry --version
    - poetry install


.quality-template: &quality
  <<: *install-deps
  image: python:3.8
  stage: quality


.test-template: &test
  <<: *install-deps
  stage: testing
  image: python:3.8
  coverage: '/TOTAL.+ ([0-9]{1,3}%)/'

codestyle:
  <<: *quality
  script:
    - poetry run pylama server
  rules:
    - when: always


docstyle:
  <<: *quality
  script:
    - poetry run pydocstyle server
  allow_failure: true


black:
  <<: *quality
  script:
    - poetry run black -l 79 --check server
  rules:
    - when: always


unit tests:
  <<: *test
  script:
    - poetry run coverage run -m unittest discover -s test/unit -v
    - poetry run coverage report

  dependencies:
    - codestyle
    - black

  rules:
    - when: on_success


export dependencies:
  <<: *install-deps

  image: python:3.8
  stage: pre-deploy

  script:
    - echo "$HEROKU_RUNTIME" > runtime.txt
    - poetry export -f requirements.txt > requirements.txt

  rules:
    - when: on_success


deploy to heroku:

  stage: deploy
  image: ruby:2.7

  script:
    - gem install dpl
    - dpl --provider=heroku --app=$SERVER_HEROKU_APP --api-key=$HEROKU_SECRET_KEY --skip-cleanup=true

  dependencies:
    - export dependencies

  rules:
    - if: '$CI_COMMIT_BRANCH == "master"'
      when: on_success
